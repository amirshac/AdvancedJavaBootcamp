package Airport;

import java.util.Stack;

public class MileageCredit {
	
	private static final float DEF_CREDIT_PER_MILE = 0.5f;
	private static final float DEF_CREDIT_PER_BONUS_MILE = 0.75f;
	private static final float DEF_BONUS_MILE_SINCE = 500f; 
	
	private float totalCredit;
	private float totalMileage;
	
	private Stack<Flight> flightStack;
	private Flight latestFlight;
	private Flyer flyer;
	
	private float creditsPerMile = DEF_CREDIT_PER_MILE;
	private float creditsPerBonusMile = DEF_CREDIT_PER_BONUS_MILE;
	private float bonusMilesSince = DEF_BONUS_MILE_SINCE;
	
	
	// constructors	
	public MileageCredit() {
		flightStack = new Stack<Flight>();
		flyer = null;	
	}

	// setters getters
	public Flight getLatestFlight() {
		return flightStack.peek();
	}

	public Flyer getFlyer() {
		return flyer;
	}

	public void setFlyer(Flyer flyer) {
		this.flyer = flyer;
	}

	// [METHODS]
	/**
	 * 
	 * @param flight
	 * @return float - Calculated credit for client according to mileage on flight
	 * including bonus points for extra mileage
	 */
	private float calculateCreditAccordingToFlight(Flight flight) {
		float totalCreditToAdd = 0;
		float flightMileage = flight.getMileage();
		float normalMileage = flightMileage;
		float bonusMileage = 0;
		
		if (flightMileage > bonusMilesSince) {
			normalMileage = bonusMilesSince;
			bonusMileage = flightMileage - bonusMilesSince;
		}
		
		totalCreditToAdd = creditsPerMile * normalMileage + creditsPerBonusMile * bonusMileage;
		return totalCreditToAdd;
	}
	
	/**
	 * Adds flight to flight stack
	 * @param flight
	 */
	public void addFlight(Flight flight) {
		flightStack.push(flight);
		latestFlight = flight;	
		totalMileage += flight.getMileage();
	}
	
	public void addCredit(Flight flight) {
		float creditToAdd = calculateCreditAccordingToFlight(flight);
		totalCredit += creditToAdd;
	}
	
	
}
